#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\begin_modules
knitr
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 2.54cm
\rightmargin 3cm
\bottommargin 2.54cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
STAT243 Problem Set2
\end_layout

\begin_layout Author
Name: Chih Hui Wang SID: 26955255
\end_layout

\begin_layout Date
September 5, 2015
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<setup, include=FALSE>>=
\end_layout

\begin_layout Plain Layout

knitr::opts_chunk$set(fig.align='center')
\end_layout

\begin_layout Plain Layout

knitr::opts_chunk$set(comment="") 
\end_layout

\begin_layout Plain Layout

knitr::opts_chunk$set(fig.width=5, fig.height=5)   
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
1.
 (a) I will use R and bash to deal with the problem.
 Use bash to make the size of file small and R to do random sampling.
 Firt, I use 
\series bold
curl
\series default
 to download the bz2 file.
 and rename it as 
\series bold
PS2data.bz2
\series default
.
 At this point, we are not allowd to directly unzip the data, so I use the
 modifier 
\series bold
-c
\series default
 to output the content to observe data.
 It will not directly unzip the file.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<download, engine='bash'>>=
\end_layout

\begin_layout Plain Layout

#Download
\end_layout

\begin_layout Plain Layout

curl -s "www.stat.berkeley.edu/share/paciorek/ss13hus.csv.bz2" -o PS2data.bz2
\end_layout

\begin_layout Plain Layout

#Show data
\end_layout

\begin_layout Plain Layout

bunzip2 -c PS2data.bz2 | head -n2
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now we turn to R to do some processing.
 Change my R working directory to 
\series bold
Work
\series default
, and use 
\series bold
list.files()
\series default
 to check whether I am in the right directory.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<changedir>>=
\end_layout

\begin_layout Plain Layout

setwd("/home/oski/Work")
\end_layout

\begin_layout Plain Layout

#To check we are in the correct working directory 
\end_layout

\begin_layout Plain Layout

list.files()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Because we only need certain column, I use 
\series bold
read.csv
\series default
 to get the first row and later use R to process it.
 To avoid the string setting as factor, I use 
\series bold
stringsAsFactors=FALSE
\series default
.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<allcolumn>>=
\end_layout

\begin_layout Plain Layout

allcol <- read.csv("PS2data.bz2", nrow=1, header=FALSE, stringsAsFactors=FALSE)
 
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To see where those columns locate, I use 
\series bold
%in%
\series default
, which give us a row of TRUE/FALSE,and 
\series bold
which
\series default
 , which give me the location,to get which columns are those we want.
 Then, output the result to number.csv and I can use cut in bash to retrieve
 those row to decrease the file size.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<colname>>=
\end_layout

\begin_layout Plain Layout

#Column we want 
\end_layout

\begin_layout Plain Layout

col_want <- c("ST", "NP", "BDSP", "BLD", "RMSP", "TEN", "FINCP",
\end_layout

\begin_layout Plain Layout

			  "FPARC", "HHL", "NOC", "MV", "VEH", "YBL")
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

#Find out which column we want to keep
\end_layout

\begin_layout Plain Layout

coln_want <- which(allcol %in% col_want)
\end_layout

\begin_layout Plain Layout

#Output the result for bash
\end_layout

\begin_layout Plain Layout

write.table(coln_want, "number.csv", row.name=FALSE, col.name=FALSE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
I store the column number in variable 
\series bold
number
\series default
.
 I use sed to replace the space by 
\series bold
,
\series default
 because when using the modifier 
\series bold
-f
\series default
 for 
\series bold
cut
\series default
, we use 
\series bold
,
\series default
 as seperator for column.
 For example, to pull out one and second columns 
\begin_inset Formula $\rightarrow$
\end_inset

 cut -d',' -f1,2 filename.
\end_layout

\begin_layout Standard
After we got those numbers for columns we want, we can use cut to take out
 those column and pipe it into command 
\series bold
gzip
\series default
 to zip the result, named PS2data.gz.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<columnprocess, engine='bash'>>=
\end_layout

\begin_layout Plain Layout

#Get the colname we want
\end_layout

\begin_layout Plain Layout

col_n=$(cat number.csv)
\end_layout

\begin_layout Plain Layout

#Get all the column number
\end_layout

\begin_layout Plain Layout

number=$(echo $col_n | sed 's/ /,/g')
\end_layout

\begin_layout Plain Layout

echo $number
\end_layout

\begin_layout Plain Layout

#Eliminate other columns and zip the result
\end_layout

\begin_layout Plain Layout

bunzip2 -c PS2data.bz2 | cut -d',' -f$number | gzip -c > PS2data.gz
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Before I start to write my function, I need to know how many rows in the
 data which then I can sample the row Index from it.
 I use 
\series bold
readLines
\series default
 and file connection here.
 It will read 100000 row for each time until there are no data anymore by
 
\series bold
while
\series default
 loop.
 I initialize l by 1 to start the while loop, so in the end I have to substract
 2 from 
\series bold
total_row
\series default
, 1 for the l and 1 for the header.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<linecount>>=
\end_layout

\begin_layout Plain Layout

total_row <- 0 
\end_layout

\begin_layout Plain Layout

datacon <- file("PS2data.gz", open="r") 
\end_layout

\begin_layout Plain Layout

#Initial 
\end_layout

\begin_layout Plain Layout

l <- 1 
\end_layout

\begin_layout Plain Layout

while(l > 0){   
\end_layout

\begin_layout Plain Layout

	total_row <- total_row + l   
\end_layout

\begin_layout Plain Layout

	l <- length(readLines(datacon, n=100000)) 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

close(datacon); rm(datacon)
\end_layout

\begin_layout Plain Layout

total_row <- total_row - 2
\end_layout

\begin_layout Plain Layout

#Total number of row in the data
\end_layout

\begin_layout Plain Layout

total_row
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
my.read.csv
\series default
 contain 3 arguments, file's name 
\series bold
(filename)
\series default
, number of sample 
\series bold
(n)
\series default
, number of total row 
\series bold
(total_row)
\series default
, how many rows we want to read each time 
\series bold
(maxrow)
\series default
.
 I first creat a variable, 
\series bold
breaks
\series default
, containing numbers from 1 to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Sexpr{format((total_row %/% 100000 + 1)*100000 + 1, scientific=FALSE)}
\end_layout

\end_inset

 by every 100000 for later usage.
 The reason to use 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Sexpr{format((total_row %/% 100000 + 1)*100000 + 1, scientific=FALSE)}
\end_layout

\end_inset

 is that there are data from row 7200001 to 7219000.
 Then the function will first create a all-0 data frame by n and the length
 of colname.
 To avoid the mismatch name, it does not use the colname users provide;
 instead, it reads the first line, gets its name and puts it to our all-0
 data frame.
 After sampling 
\series bold
(row_want)
\series default
, it uses file to open a reading connection, which can help us keep the
 pointer and escape the slow speed by skipping large number.
 Then it runs a for-loop which containing the process of reading 100000
 each time (
\series bold
read.csv
\series default
 with argument 
\series bold
nrow=maxrow
\series default
) and also finds the corresponding row we want in our sample 
\series bold
(row_want)
\series default
 as well as updates the row index 
\series bold
j
\series default
.
 Finally it closes the connection and renders the sample data for user.
\end_layout

\begin_layout Standard
There are several points that I should clarify in my function.
 First, the reason why I do not use the 
\series bold
col_want
\series default
(previous variable) as the name of the data is that when we compare the
 name by 
\series bold
%in%
\series default
 and 
\series bold
which
\series default
, the output will not give location exactly same as the order of our col_want.
 Hence, it may be safer to directly use data name.
 Second, when I wirte the for loop, I use
\series bold
 length(breaks) - 1
\series default
.
 Because the last number of breaks is 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Sexpr{format((total_row %/% 100000 + 1)*100000 + 1, scientific=FALSE)}
\end_layout

\end_inset

 which is bigger than the length of our data, it should not go through the
 operation in the for loop.
 Thrid, I use 
\series bold
file
\series default
 function to create a reading connection here.
 By doing so, I can avoid use the 
\series bold
skip
\series default
 function in 
\series bold
read.csv
\series default
 which makes the speed of reading the data in the last very slow; in other
 words, I have to skip a large number of row.
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<function1>>=
\end_layout

\begin_layout Plain Layout

#function 
\end_layout

\begin_layout Plain Layout

my.read.csv <- function(filename, n, total_row,maxrow=100000){ 
\end_layout

\begin_layout Plain Layout

		upper <- (total_row %/% maxrow) + 2   
\end_layout

\begin_layout Plain Layout

		breaks <- seq(1, maxrow*upper + 1, by=maxrow)   
\end_layout

\begin_layout Plain Layout

		datacon <- file(filename, open='r')   
\end_layout

\begin_layout Plain Layout

		col_name <- read.csv(datacon, nrow=1, header=FALSE, stringsAsFactors=FALSE)
   
\end_layout

\begin_layout Plain Layout

		data <- matrix(0, nrow=n, ncol=length(col_name))   
\end_layout

\begin_layout Plain Layout

		data <- as.data.frame(data)  
\end_layout

\begin_layout Plain Layout

		#Avoid miss match   
\end_layout

\begin_layout Plain Layout

		names(data) <- col_name   
\end_layout

\begin_layout Plain Layout

		#Sample   
\end_layout

\begin_layout Plain Layout

		n.row <- sample(1:total_row, n)     
\end_layout

\begin_layout Plain Layout

		#Index   
\end_layout

\begin_layout Plain Layout

		j <- 1   
\end_layout

\begin_layout Plain Layout

		for(i in 1:(length(breaks) - 1)){     
\end_layout

\begin_layout Plain Layout

			row_want <- which(n.row >= breaks[i] & n.row < breaks[i + 1])
\end_layout

\begin_layout Plain Layout

			if(length(row_want) == 0){
\end_layout

\begin_layout Plain Layout

				next     
\end_layout

\begin_layout Plain Layout

			}else{       
\end_layout

\begin_layout Plain Layout

			data[j:(j + length(row_want) - 1), ] <- read.csv(datacon, nrow=maxrow,
 header=FALSE)[n.row[row_want] - breaks[i] + 1, ]       
\end_layout

\begin_layout Plain Layout

			j <- j + length(row_want)       
\end_layout

\begin_layout Plain Layout

			}   
\end_layout

\begin_layout Plain Layout

		}   
\end_layout

\begin_layout Plain Layout

		close(datacon)   
\end_layout

\begin_layout Plain Layout

		data 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

set.seed(1) 
\end_layout

\begin_layout Plain Layout

newdata <- my.read.csv("PS2data.gz", n=10000, total_row, maxrow=100000) 
\end_layout

\begin_layout Plain Layout

write.csv(newdata, "NewPS2data.csv", row.names=FALSE)
\end_layout

\begin_layout Plain Layout

head(newdata)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To check that I have output the file correctly.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<check, engine='bash'>>=
\end_layout

\begin_layout Plain Layout

ls -lh NewPS2data.csv
\end_layout

\begin_layout Plain Layout

cat NewPS2data.csv | head -n5
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset

(b) In this problem, I will compare three way to read the data and sample
 it, which is 
\series bold
read.csv
\series default
, 
\series bold
read_csv
\series default
, 
\series bold
readLines
\series default
.
 My function's strutcure will basically be the same as the one I write about
 (
\series bold
my.read.csv
\series default
).
 I finished the one for read.csv.
 
\end_layout

\begin_layout Standard
Now, let us first deal with the function for 
\series bold
read_csv
\series default
 in the package 
\series bold
\shape italic
readr
\series default
\shape default
.
 For 
\series bold
read_csv
\series default
, the connection will be unable to use.
 When it read by the connection, it will automatically close the connection;
 therefore we lose the pointer which make me have to use 
\series bold
skip
\series default
 argument in it.
 Although using 
\series bold
skip
\series default
 for 
\series bold
read_csv
\series default
 will be faster than 
\series bold
read.csv
\series default
, its speed is still very low.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<function2, message=FALSE>>=
\end_layout

\begin_layout Plain Layout

library(readr)
\end_layout

\begin_layout Plain Layout

my.read_csv <- function(filename, n, total_row, maxrow=100000){   
\end_layout

\begin_layout Plain Layout

		upper <- (total_row %/% maxrow) + 1   
\end_layout

\begin_layout Plain Layout

		breaks <- seq(1, maxrow*upper + 1, by=maxrow)   
\end_layout

\begin_layout Plain Layout

		col_name <- names(read_csv(filename, n_max=1))
\end_layout

\begin_layout Plain Layout

		data <- matrix(0, nrow=n, ncol=length(col_name))   
\end_layout

\begin_layout Plain Layout

		data <- as.data.frame(data)   
\end_layout

\begin_layout Plain Layout

		#Avoid miss match   
\end_layout

\begin_layout Plain Layout

		names(data) <- col_name   
\end_layout

\begin_layout Plain Layout

		#Sample   
\end_layout

\begin_layout Plain Layout

		n.row <- sample(1:total_row, n)   
\end_layout

\begin_layout Plain Layout

		#Index   
\end_layout

\begin_layout Plain Layout

		j <- 1   
\end_layout

\begin_layout Plain Layout

		for(i in 1:(length(breaks) - 1)){     
\end_layout

\begin_layout Plain Layout

			row_want <- which(n.row >= breaks[i] & n.row < breaks[i + 1])     
\end_layout

\begin_layout Plain Layout

			if(length(row_want) == 0){
\end_layout

\begin_layout Plain Layout

				next     
\end_layout

\begin_layout Plain Layout

			}else{      
\end_layout

\begin_layout Plain Layout

				data[j:(j + length(row_want) - 1), ] <- read_csv(filename, n_max=maxrow,
 skip=breaks[i] - 1)[n.row[row_want] - breaks[i] + 1, ]       
\end_layout

\begin_layout Plain Layout

				j <- j + length(row_want)       
\end_layout

\begin_layout Plain Layout

			}   
\end_layout

\begin_layout Plain Layout

		}   
\end_layout

\begin_layout Plain Layout

		data 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

set.seed(1)
\end_layout

\begin_layout Plain Layout

data <- my.read_csv("PS2data.gz", n=10000, total_row, maxrow=100000) 
\end_layout

\begin_layout Plain Layout

head(data)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The next one is 
\series bold
readLines
\series default
.
 It read in each line as a character.
 Hence, without any processing, I cannot just put the sample into the all-0
 data frame.
 Since the file is seperate by 
\series bold
,
\series default
.
 I can use the function 
\series bold
strsplit
\series default
 to split the character into different columns by 
\series bold
,
\series default
.
 However, when I do this operation, some rows' length is not 13 which is
 our total column number.
 The probelm present as below.
 If there is a space next to the last comma, the 
\series bold
strsplit
\series default
 function will not give us that space.
 To addfress this problem, I use 
\series bold
gsub
\series default
 which replace all the 
\series bold
,
\series default
 by 
\series bold
, 
\series default
(with a space in the end).
 Then using the 
\series bold
strsplit
\series default
, I can get the last space, but another problem occurs.
 After spliting, the class of the output is list.
 My strategy is to make the data into a numeric matrix by the function,
 unlist and putting it into another matrix.
 By doing so, I can input the value into our data frame.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<example>>=
\end_layout

\begin_layout Plain Layout

eg <- "I,am," 
\end_layout

\begin_layout Plain Layout

strsplit(eg, split=",")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<function3>>=
\end_layout

\begin_layout Plain Layout

my.readLines <- function(filename, n, total_row, maxrow=100000){   
\end_layout

\begin_layout Plain Layout

		upper <- (total_row %/% maxrow) + 1   
\end_layout

\begin_layout Plain Layout

		breaks <- seq(1, maxrow*upper + 1, by=maxrow)   
\end_layout

\begin_layout Plain Layout

		datacon <- file(filename, open="r")   
\end_layout

\begin_layout Plain Layout

		col_name <- strsplit(readLines(datacon, n=1), split=",")[[1]]   
\end_layout

\begin_layout Plain Layout

		data <- matrix(0, nrow=n, ncol=length(col_name))   
\end_layout

\begin_layout Plain Layout

		data <- as.data.frame(data)   
\end_layout

\begin_layout Plain Layout

		names(data) <- col_name  
\end_layout

\begin_layout Plain Layout

		#Sample   
\end_layout

\begin_layout Plain Layout

		n.row <- sample(1:total_row, n)   
\end_layout

\begin_layout Plain Layout

		j <- 1   
\end_layout

\begin_layout Plain Layout

		for(i in 1:(length(breaks) - 1)){     
\end_layout

\begin_layout Plain Layout

			row_want <- which(n.row >= breaks[i] & n.row < breaks[i + 1])
\end_layout

\begin_layout Plain Layout

			if(length(row_want) == 0){       
\end_layout

\begin_layout Plain Layout

				next     
\end_layout

\begin_layout Plain Layout

			}else{       
\end_layout

\begin_layout Plain Layout

				data_row <- readLines(datacon, n=maxrow)[n.row[row_want] - breaks[i]
 + 1]       
\end_layout

\begin_layout Plain Layout

				process <- as.numeric(unlist(strsplit(gsub(",", ", ", data_row), split=",")))
       
\end_layout

\begin_layout Plain Layout

				process_matrix <- matrix(process, nrow=length(row_want), ncol=length(col_nam
e), byrow=TRUE)       
\end_layout

\begin_layout Plain Layout

				data[j:(j + length(row_want) - 1), ] <- process_matrix   
\end_layout

\begin_layout Plain Layout

				j <- j + length(row_want)        
\end_layout

\begin_layout Plain Layout

			}   
\end_layout

\begin_layout Plain Layout

		}   
\end_layout

\begin_layout Plain Layout

		close(datacon)   
\end_layout

\begin_layout Plain Layout

		data 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

set.seed(1) 
\end_layout

\begin_layout Plain Layout

data <- my.readLines("PS2data.gz", n=10000, total_row, maxrow=100000) 
\end_layout

\begin_layout Plain Layout

head(data)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The last one is kind of a mix for above funtion(
\series bold
readLines
\series default
 and 
\series bold
read.csv
\series default
 or 
\series bold
read_csv
\series default
).
 I notice that the 
\series bold
readLines
\series default
 with connection is really fast when reading data.
 I take advantage of this point; however I do not make any processing in
 my for-loop.
 Instead, I just retrieve those row I want by 
\series bold
readLines
\series default
.
 To solve the problem, I can use the 
\series bold
writeLines
\series default
 function to write the output into csv file and use read_csv to read the
 csv file.
 Therefore, I can save some time for processing the output of 
\series bold
readLines
\series default
.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<function4>>=
\end_layout

\begin_layout Plain Layout

library(readr)
\end_layout

\begin_layout Plain Layout

my.read.mix <- function(filename, n, total_row, maxrow=100000){   
\end_layout

\begin_layout Plain Layout

		upper <- (total_row %/% maxrow) + 1   
\end_layout

\begin_layout Plain Layout

		breaks <- seq(1, maxrow*upper + 1, by=maxrow)   
\end_layout

\begin_layout Plain Layout

		datacon <- file(filename, open="r")   
\end_layout

\begin_layout Plain Layout

		data <- matrix(0, nrow=n + 1)   
\end_layout

\begin_layout Plain Layout

		data[1] <- readLines(datacon, n=1)   
\end_layout

\begin_layout Plain Layout

		#Sample   
\end_layout

\begin_layout Plain Layout

		n.row <- sample(1:total_row, n)   
\end_layout

\begin_layout Plain Layout

		#Index   
\end_layout

\begin_layout Plain Layout

		j <- 2   
\end_layout

\begin_layout Plain Layout

		for(i in 1:(length(breaks) - 1)){     
\end_layout

\begin_layout Plain Layout

			row_want <- which(n.row >= breaks[i] & n.row < breaks[i + 1])
\end_layout

\begin_layout Plain Layout

			if(length(row_want) == 0){       
\end_layout

\begin_layout Plain Layout

				next     
\end_layout

\begin_layout Plain Layout

			}else{       
\end_layout

\begin_layout Plain Layout

				data[j:(j + length(row_want) - 1)] <- readLines(datacon, n=maxrow)[n.row[row_
want] - breaks[i] + 1]       
\end_layout

\begin_layout Plain Layout

				j <- j + length(row_want)        
\end_layout

\begin_layout Plain Layout

			}   
\end_layout

\begin_layout Plain Layout

		}   
\end_layout

\begin_layout Plain Layout

		close(datacon)   
\end_layout

\begin_layout Plain Layout

		writeLines(data, "data.csv")   
\end_layout

\begin_layout Plain Layout

		read_csv("data.csv") 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

set.seed(1) 
\end_layout

\begin_layout Plain Layout

data <- my.read.mix("PS2data.gz", n=10000, total_row, maxrow=100000)
\end_layout

\begin_layout Plain Layout

head(data)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For overall speed performance, 
\series bold
readLines
\series default
 is faster than 
\series bold
read.csv
\series default
 and 
\series bold
read.csv
\series default
 is faster than 
\series bold
read_csv
\series default
.
 The reason why 
\series bold
readLines
\series default
 is so fast is that it only read line by line data withou processing and
 putting them into data.frame while the 
\series bold
read.csv
\series default
 does.
 I think why 
\series bold
read_csv
\series default
 is slow in this situation is that when it read the compressed file, it
 will automatically uncompress it.
 Also, I do not find a method to use connection with 
\series bold
read_csv
\series default
 which forces me to use the argument skip.
 Therefore, whenever it read the data in for-loop, it will uncompress the
 file.
 I believe that it is the main reason why 
\series bold
read_csv
\series default
 cannot outperform over 
\series bold
read.csv
\series default
 in this case.
 Actually, I tried to unzip the file and use the similar function(as 
\series bold
my.read_csv
\series default
) to read it.
 Its performance may not be slower than 
\series bold
my.read.csv
\series default
.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<comparison>>=
\end_layout

\begin_layout Plain Layout

system.time(my.read.csv("PS2data.gz", n=10000, total_row, maxrow=100000)) 
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<comparison2, message=FALSE>>=
\end_layout

\begin_layout Plain Layout

system.time(my.read_csv("PS2data.gz", n=10000, total_row, maxrow=100000))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<comparison3>>=
\end_layout

\begin_layout Plain Layout

system.time(my.readLines("PS2data.gz", n=10000, total_row, maxrow=100000))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<comparison4>>=
\end_layout

\begin_layout Plain Layout

system.time(my.read.mix("PS2data.gz", n=10000, total_row, maxrow=100000))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
(c) I have done it first when I read in the data, which is that I eliminated
 the column.
 The dim of processed data is 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Sexpr{format(total_row, scientific=FALSE)}
\end_layout

\end_inset

x13.
 Compared to the original data, it reduced large size so I can read it faster.
 
\end_layout

\begin_layout Standard
(d) First of all, I make sure every column have the same value or range
 as the description.
 Indeed, the range is correct.
 I will select some variables to make some tables or graphs to detect wether
 there is any interesting relationship between variable.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<range>>=
\end_layout

\begin_layout Plain Layout

#Check the field 
\end_layout

\begin_layout Plain Layout

summary(data)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<correlation>>=
\end_layout

\begin_layout Plain Layout

round(cor(data, use="complete.obs"), 2)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
First I compare two variable FINCP(family incom) and TEN(tenure).
 Originally, I think those family who have a higher income may not have
 house mortgage which should belong to second category in TEN(own free and
 clear).
 However, it turns out that overall family who owns mortgage may have a
 higher income, although the difference may not be statistically siginificant.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<EDA1>>=
\end_layout

\begin_layout Plain Layout

with(data, boxplot(FINCP ~ TEN, xlab="Tenure type", ylab="Income"))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Then I want to see the distribution of HHL(household language) among ST(state
 code).
 It is quite hard to detect any pattern by table.
 Therefore, I try to visualize them in a better way.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<EDA2>>=
\end_layout

\begin_layout Plain Layout

#Table
\end_layout

\begin_layout Plain Layout

round(with(data, prop.table(table(HHL, ST), 2)), 2)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
I used the ggplot to visualize the table by tile plot(geom_tile).
 We can find that there may be other second languages in household for those
 state coded as 48, 35, 32, 15, 6.
 It turns out that #48 is Texas, #35 is New Mexico, #32 is Nevado, #15 is
 Hawaii and #6 is California.
 Hawaii's Second language is other Indo-European languages while other states
 are Spanish.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<EDA2b>>=
\end_layout

\begin_layout Plain Layout

t <- as.data.frame(round(with(data, prop.table(table(HHL, ST), 2)), 2))
\end_layout

\begin_layout Plain Layout

library(ggplot2) 
\end_layout

\begin_layout Plain Layout

#Visualize 
\end_layout

\begin_layout Plain Layout

ggplot(t) + geom_tile(aes(x=HHL, y=ST, z=Freq, fill=Freq)) 
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Lastly, I make a table for NP(number of person records following the house)
 and vehicle.
 I find that some family only have few person record like 2, 3 or even 1,
 but they have 4 or more vehicles, which is quite strange.
 Maybe they have different vehicle for diferent purpose.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<EDA3>>=
\end_layout

\begin_layout Plain Layout

with(data, table(NP, VEH))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_body
\end_document
