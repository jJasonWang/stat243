#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\begin_modules
knitr
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 2.54cm
\rightmargin 3cm
\bottommargin 2.54cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
STAT243 Problem Set 5
\end_layout

\begin_layout Author
Name: Chih Hui Wang SID: 26955255
\end_layout

\begin_layout Date
October 18, 2015
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<setup>>=
\end_layout

\begin_layout Plain Layout

options(digits=22)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
1.
 (a) The accuracy we should have is 16 places.
\end_layout

\begin_layout Standard
(b) Indeed, the accuracy of sum is 16 places.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<sum>>=
\end_layout

\begin_layout Plain Layout

#Create the vector
\end_layout

\begin_layout Plain Layout

x <- c(1, rep(1e-16, 10000)) 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

sum(x)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
(c) When using the sum in Python, it loses the accuracy after the decimal
 point.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<Pythonsum, engine='python'>>=
\end_layout

\begin_layout Plain Layout

import numpy as np 
\end_layout

\begin_layout Plain Layout

import decimal as dm 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Create Vector 
\end_layout

\begin_layout Plain Layout

vec = np.array([1e-16]*(10001)) 
\end_layout

\begin_layout Plain Layout

vec[0] = 1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

v0 = dm.Decimal(sum(vec)) 
\end_layout

\begin_layout Plain Layout

print(v0)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
(d) For the loop in a reversed way, it gives us the correct accuracy while
 for the original order, it lose the accuracy.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<Rfor1>>=
\end_layout

\begin_layout Plain Layout

#1 is the first term 
\end_layout

\begin_layout Plain Layout

value <- 0 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for(i in 1:length(x)){   
\end_layout

\begin_layout Plain Layout

  value <- value + x[i]    
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Ouput 
\end_layout

\begin_layout Plain Layout

value
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<Rfor2>>=
\end_layout

\begin_layout Plain Layout

#1 is the last term 
\end_layout

\begin_layout Plain Layout

value <- 0
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for(i in length(x):1){   
\end_layout

\begin_layout Plain Layout

  value <- value + x[i]    
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Ouput 
\end_layout

\begin_layout Plain Layout

value
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The same thing happens in Python.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<Pythonfor1, engine='python'>>=
\end_layout

\begin_layout Plain Layout

import numpy as np 
\end_layout

\begin_layout Plain Layout

import decimal as dm
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Create Vector 
\end_layout

\begin_layout Plain Layout

vec = np.array([1e-16]*(10001)) 
\end_layout

\begin_layout Plain Layout

vec[0] = 1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# 1 is the first term 
\end_layout

\begin_layout Plain Layout

value = 0 
\end_layout

\begin_layout Plain Layout

index = np.arange(10000) 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for i in index: 	
\end_layout

\begin_layout Plain Layout

	value = value + vec[i]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

v1 = dm.Decimal(value) 
\end_layout

\begin_layout Plain Layout

print(v1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<Pythonfor2, engine='python'>>=
\end_layout

\begin_layout Plain Layout

import numpy as np 
\end_layout

\begin_layout Plain Layout

import decimal as dm
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Create Vector 
\end_layout

\begin_layout Plain Layout

vec = np.array([1e-16]*(10001)) 
\end_layout

\begin_layout Plain Layout

vec[0] = 1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# 1 is the last term 
\end_layout

\begin_layout Plain Layout

value = 0 
\end_layout

\begin_layout Plain Layout

index = np.arange(10000) 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for i in reversed(index): 	
\end_layout

\begin_layout Plain Layout

	value = value + vec[i]
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

v2 = dm.Decimal(value) 
\end_layout

\begin_layout Plain Layout

print(v2)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
(e) The result of 
\series bold
sum
\series default
 indicate that it address the problem smartly when there are some extremely
 small or large number.
 From previous result, it shows that the 
\series bold
sum
\series default
 definitely does not use the 
\series bold
for
\series default
 loop easily from the beginning to end.
\end_layout

\begin_layout Standard
2.
 I did three operation, for-loop sum, inverse matrix, subset, to compare
 the speed between integer and double.
 
\end_layout

\begin_layout Standard
First, I created a all 1 vector, 
\series bold
x
\series default
, and use for loop to get the sum of them.
 The speed for integer is quite similar to double.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<integer1>>=
\end_layout

\begin_layout Plain Layout

#Change the output digits back to 7
\end_layout

\begin_layout Plain Layout

options(digits=7)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#for loop 
\end_layout

\begin_layout Plain Layout

x <- rep(1, 10000000) 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Change data type 
\end_layout

\begin_layout Plain Layout

intx <- as.integer(x) 
\end_layout

\begin_layout Plain Layout

#Examine type
\end_layout

\begin_layout Plain Layout

typeof(intx) 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ins <- 0 
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<double1>>=
\end_layout

\begin_layout Plain Layout

#Examine type
\end_layout

\begin_layout Plain Layout

typeof(x) 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

s <- 0 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

library(rbenchmark)
\end_layout

\begin_layout Plain Layout

#Comparison
\end_layout

\begin_layout Plain Layout

benchmark(
\end_layout

\begin_layout Plain Layout

  integer=for(i in 1:length(intx)){   
\end_layout

\begin_layout Plain Layout

    ins <- ins + intx[i] 
\end_layout

\begin_layout Plain Layout

  },
\end_layout

\begin_layout Plain Layout

  double=for(i in 1:length(x)){   
\end_layout

\begin_layout Plain Layout

    s <- s + x[i] 
\end_layout

\begin_layout Plain Layout

  },
\end_layout

\begin_layout Plain Layout

  replications=5
\end_layout

\begin_layout Plain Layout

)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Second, the inverse of matrix, I created a big matrix and use 
\series bold
solve
\series default
 to get its inverse.
 It turns that the speed for integer is faster than double.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<integer2>>=
\end_layout

\begin_layout Plain Layout

# Inverse of matrix 
\end_layout

\begin_layout Plain Layout

# Integer 
\end_layout

\begin_layout Plain Layout

intm <- matrix(sample(1:2000, size=1000000, replace=TRUE),             
\end_layout

\begin_layout Plain Layout

    ncol=1000, nrow=1000)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Examine type
\end_layout

\begin_layout Plain Layout

typeof(intm) 
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<double2>>=
\end_layout

\begin_layout Plain Layout

#Change data type 
\end_layout

\begin_layout Plain Layout

m <- apply(intm, 1, as.numeric)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Examine type
\end_layout

\begin_layout Plain Layout

typeof(m) 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Comparison
\end_layout

\begin_layout Plain Layout

benchmark(
\end_layout

\begin_layout Plain Layout

  integer=solve(intm),
\end_layout

\begin_layout Plain Layout

  double=solve(m),
\end_layout

\begin_layout Plain Layout

  replications=5
\end_layout

\begin_layout Plain Layout

)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Finally, the subset, I created a vector 
\series bold
x
\series default
 from 1 to 100000 and use 
\series bold
sample
\series default
 to make a random index vector to subset 
\series bold
x
\series default
.
 The result is that integer performs faster than doouble.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<integer3>>=
\end_layout

\begin_layout Plain Layout

# Subsetting 
\end_layout

\begin_layout Plain Layout

# Integer 
\end_layout

\begin_layout Plain Layout

intx <- 1:1000000 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Examine type
\end_layout

\begin_layout Plain Layout

typeof(intx) 
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<double3>>=
\end_layout

\begin_layout Plain Layout

#Change data type
\end_layout

\begin_layout Plain Layout

x <- as.numeric(x)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Examine type
\end_layout

\begin_layout Plain Layout

typeof(x) 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Comparison
\end_layout

\begin_layout Plain Layout

benchmark(
\end_layout

\begin_layout Plain Layout

  integer=intx[sample(length(intx))],
\end_layout

\begin_layout Plain Layout

  double=x[sample(length(x))],
\end_layout

\begin_layout Plain Layout

  replications=5
\end_layout

\begin_layout Plain Layout

)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_body
\end_document
